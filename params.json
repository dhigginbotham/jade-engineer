{"name":"Jade Engineer","tagline":"render html inside a middleware from json to pass to your view on the server side","body":"## Jade Engineer <img src=\"https://drone.io/github.com/dhigginbotham/jade-engineer/status.png\" align=\"right\" />\r\nThe purpose of this module is to render `big` / `small` / `micro` views on the server side with jade from an object/json. This is helpful if you have big datasets and need to render massive tables. I got something like 300,000 rows to give me a headache, but that was due to a client browser issue, by that time the middleware had long rendered the html.\r\n\r\n\r\n### Options\r\nKey | Description\r\n--- | ---\r\n`template` | you can swap out jade files to run your own views, however i will most likely be adding many views overtime as this is a pretty common use case in my world.\r\n`pretty` | jade supports `pretty` & `ugly` html, i passed this through as it's probably nice to have access to.\r\n`fields` | array objects of `key`, `title` for which fields to load in for templating.\r\n`data` | json/object to give to jade, usually a db.find or some json from an api, file, etc..\r\n\r\n### Usage\r\n````js\r\nvar express = require('express');\r\nvar app = express();\r\n\r\nvar server = require('http').createServer(app);\r\n\r\n// include some data, an easy replacement would be\r\n// to grab this from mongodb or something similar.\r\nvar data = require('./data.json');\r\n\r\n// require jade-engineer\r\nvar engineer = require('../lib');\r\n\r\nvar path = require('path');\r\n\r\n//1337 port is 1337\r\napp.set('port', 1337);\r\n\r\n// set our view and view engine\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'jade');\r\n\r\nvar exampleOptions = {\r\n  fields: [\r\n    {key: 'name', title: 'Name'},\r\n    {key: 'phone', title: 'Phone'},\r\n    {key: 'date', title: 'Date'},\r\n    {key: 'email', title: 'Email Address'}\r\n  ]\r\n};\r\n\r\n// make an example out of this middleware ;)\r\nvar exampleMiddle = function (req, res, next) {\r\n\r\n  // create new engineer object\r\n  var example = new engineer();\r\n  \r\n  // get the start time\r\n  var startMs = Date.now();\r\n\r\n  // running .make gives us some html to do with as we wish\r\n  example.make(exampleOptions, data, function (err, html) {\r\n    \r\n    if (err) {\r\n\r\n      return next(err, null);\r\n\r\n    }\r\n\r\n    if (html) {\r\n\r\n      // set `res.locals.table`\r\n      res.locals.table = html;\r\n\r\n      // store end time to get our speed test.\r\n      var endMs = Date.now();\r\n\r\n      // find out how long it took...\r\n      console.log('It took ' + (endMs - startMs) + 'ms to render ' + data.length + ' rows.');\r\n\r\n      return next();\r\n\r\n    } else {\r\n     \r\n      // using this pattern allows you to handle not having\r\n      // any html to return, and no error. Probably because you're\r\n      // missing something in your chain.\r\n\r\n      return next();\r\n    \r\n    }\r\n\r\n  });\r\n\r\n};\r\n\r\nvar exampleRoute = function (req, res, next) {\r\n\r\n  // return res.render with our example.jade file\r\n  return res.render('example');\r\n\r\n};\r\n\r\n// set app.get w/ some middleware and a route\r\napp.get('/', exampleMiddle, exampleRoute);\r\n\r\nserver.listen(app.get('port'), function () {\r\n  console.log('jade-engineer example running on port %s', app.get('port'));\r\n});\r\n````\r\n\r\n### License\r\n````js\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2013 David Higginbotham \r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n````","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}